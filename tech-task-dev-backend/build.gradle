/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagement}"
    id "com.ewerk.gradle.plugins.querydsl" version "${ewerkQueryDslVersion}"
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group="org.demicon.tech.task.d3.cloud"
version="0.0.2-SNAPSHOT"

dependencies {
    implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"

    implementation "com.google.guava:guava:${googleGuavaVersion}"
    implementation "javax.validation:validation-api:${javaxValidationVersion}"

    annotationProcessor("com.querydsl:querydsl-apt")
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-apt'
    compileOnly "com.mysema.querydsl:querydsl-apt:${mysemaQueryDslVersion}"

    implementation "org.postgresql:postgresql:${postgresVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
    testImplementation "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

configurations {
    querydsl.extendsFrom compileClasspath
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir "$buildDir/generated/source/main"
        }
    }
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

querydsl {
    jpa = true
    querydslSourcesDir = "$buildDir/generated/source/main"
}

project.afterEvaluate {
    project.tasks.compileQuerydsl.options.compilerArgs = [
            "-proc:only",
            "-processor", project.querydsl.processors() +
                    ',lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
    ]
}

ext {
    generatedSourcesDir = file("${buildDir}/generated-sources/javac/main/java")
}

// These are the only modifications to build process that are required.
compileJava {
    doFirst {
        // Directory should exists before compilation started.
        generatedSourcesDir.mkdirs()
    }
    // specify place to keep source files
    options.compilerArgs += ['-s', generatedSourcesDir]
}

bootJar {
    manifest {
        attributes 'Start-Class': 'org.demicon.tech.task.d3.cloud.App'
    }
}

bootBuildImage {
    builder = "paketobuildpacks/builder:base"
    imageName = "joepalmeras66/${project.name}:${project.version}"
//    tags = ["joepalmeras66/${project.name}:latest"]
    /*docker {
        publishRegistry {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            url = "${dockerRegistryUrl}"
        }
    }*/
}

clean {
    delete 'create.sql'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}